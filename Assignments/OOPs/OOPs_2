{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "16ca8011-a73a-4c59-8de3-9a4dbe2f4237",
   "metadata": {},
   "source": [
    "Q1. Create a vehicle class with an init method having instance variables as name_of_ vehicle, max_speed and average_of_vehicle."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "8bff5e8d-d008-4316-be12-5f43ff741ae0",
   "metadata": {},
   "outputs": [],
   "source": [
    "class vehicle:\n",
    "    def __init__(self,name_of_vehicle,max_speed,average_of_vehicle):\n",
    "        self.name_of_vehicle = name_of_vehicle\n",
    "        self.max_speed = max_speed\n",
    "        self.average_of_vehicle = average_of_vehicle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8a158a5a-1605-4585-932a-6740b689b9b4",
   "metadata": {},
   "outputs": [],
   "source": [
    "obj_vehicle = vehicle(\"NEXON\",200,120)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "69a2be8a-91e1-4aee-a15f-b367b3da29cc",
   "metadata": {},
   "outputs": [],
   "source": [
    "obj_vehicle.average_of_vehicle = 125"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "a4473966-1592-4c0a-97d9-e4546065b566",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "125"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj_vehicle.average_of_vehicle"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "af0e2eeb-7236-4838-ae20-ea4d2a751dd7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "200"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj_vehicle.max_speed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "16bb2961-54ee-4cd9-ae2f-0ec07691812f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'NEXON'"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obj_vehicle.name_of_vehicle"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d1b24e10-b1b7-4b57-b523-905df8549e7e",
   "metadata": {},
   "source": [
    "Q2. Create a child class car from the vehicle class created in Que 1, which will inherit the vehicle class.\n",
    "Create a method named seating _capacity which takes capacity as an argument and returns the name of the vehicle and its seating capacity."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "8920e8b3-61b6-41f3-b5ce-c6c168c54215",
   "metadata": {},
   "outputs": [],
   "source": [
    "class car(vehicle):\n",
    "    def seating_capacity(self,capacity):\n",
    "        self.capacity = capacity\n",
    "        return f'The name of vehicle is {self.name_of_vehicle}, and the seating capacity is {self.capacity}'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "bfc8e76a-c297-4972-a89d-2e9c49fac5cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "car = car('Nexon',20,15)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "a8ab37e2-7a28-4c51-b63c-9568b484d5e6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'The name of vehicle is Nexon, and the seating capacity is 5'"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "car.seating_capacity(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "6b59825e-5b21-4d01-8935-689211f34818",
   "metadata": {},
   "outputs": [],
   "source": [
    "car = car('Innova',25,18)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "505e4322-31b3-4f7a-907e-6e1ac070c401",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'The name of vehicle is Innova, and the seating capacity is 8'"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "car.seating_capacity(8)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9e6d4d7c-e3ba-4dc8-a951-a308f8a95e0b",
   "metadata": {},
   "source": [
    "Q3. What is multiple inheritance? Write a python code to demonstrate multiple inheritance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "fcab6501-f98b-4f46-838f-31dfe5948da6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# multiple inheritance\n",
    "# When a class can be derived from more than one base class this type of inheritance is called multiple inheritances.\n",
    "# Base class1\n",
    "class color:\n",
    "    colorname = \"\"\n",
    "\n",
    "    def color(self):\n",
    "        print(self.colorname)\n",
    "# Base class2\n",
    "class item:\n",
    "    itemname = \"\"\n",
    "    def item(self):\n",
    "        print(self.itemname)\n",
    "# Derived class\n",
    "class describe(color, item):\n",
    "    def attribute(self):\n",
    "        print(\"Color :\", self.colorname)\n",
    "        print(\"Item :\", self.itemname)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "5044de8d-c17a-46d6-a303-83d675c26b16",
   "metadata": {},
   "outputs": [],
   "source": [
    "s = describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "ec481a44-25a2-4bb4-9f3a-f3582d85a87f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Color : Black\n",
      "Item : Wallet\n"
     ]
    }
   ],
   "source": [
    "s.colorname = \"Black\"\n",
    "s.itemname = \"Wallet\"\n",
    "s.attribute()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "84a53d46-65c2-4a8a-8034-5efc50605dfe",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Color : Silver\n",
      "Item : Bottle\n"
     ]
    }
   ],
   "source": [
    "s.colorname = \"Silver\"\n",
    "s.itemname = \"Bottle\"\n",
    "s.attribute()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f67b815b-45e5-4c3c-a72c-e6a8b3668f53",
   "metadata": {},
   "source": [
    "Q4. What are getter and setter in python? Create a class and create a getter and a setter method in this class."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e2929173-45f6-4841-8df2-dcb74223f340",
   "metadata": {},
   "source": [
    "Getter and setter are used as method. Getter method allows you to access an attribute in a given class. Whereas,\n",
    "Setter method allows you to set or mutate the value of an attribute in a class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "f1ce3b1a-348b-411b-9838-af05eb50110d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "5\n",
      "5\n"
     ]
    }
   ],
   "source": [
    "class vehicle:   \n",
    "    def __init__(self, hp = 0):   \n",
    "         self._hp = hp   \n",
    "\n",
    "    def get_hp(self):   \n",
    "        return self._hp\n",
    "    \n",
    "    def set_hp(self, hp):   \n",
    "        self._hp = hp\n",
    "    \n",
    "car= vehicle()   \n",
    "    \n",
    "car.set_hp(5)   \n",
    "    \n",
    "print(car.get_hp())   \n",
    "    \n",
    "print(car._hp) "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "db96083d-52ee-4b10-9a77-f7fb3d994fc2",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "id": "058b1b3d-e205-4ee5-848f-618c362ac7db",
   "metadata": {},
   "source": [
    "Q5.What is method overriding in python? Write a python code to demonstrate method overriding."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "825423dc-9a89-4cbd-8c1a-5388471cbcf9",
   "metadata": {},
   "source": [
    "During Inheritance, a child class method overrides the parent class method of the same name, parameters and return type, it is known as method overriding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "74e6857a-770d-433e-903f-f0266ac3e6bd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parent class \n",
    "class vehicle:\n",
    "\n",
    "    def type_of_car(self):\n",
    "        print(\"It is a sedan.\")\n",
    "\n",
    "    # function two_dimensional \n",
    "    def engine(self):\n",
    "        print(\"It is a diesel engine.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "502c22fa-2685-40f7-a22f-a12c167806e1",
   "metadata": {},
   "outputs": [],
   "source": [
    "class xuv(vehicle):\n",
    "\n",
    "    def type_of_car (self):\n",
    "        print(\"It is a SUV\")\n",
    "\n",
    "    def color(self):\n",
    "        print(\"It is teal in color.\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "268bc0e8-828b-4d4c-9362-b23552d1de15",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "It is a SUV\n",
      "It is a diesel engine.\n",
      "It is teal in color.\n"
     ]
    }
   ],
   "source": [
    "car = xuv()\n",
    "car.type_of_car() # overrides the engine of parent class\n",
    "car.engine() \n",
    "car.color()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ff5fb322-dc5f-4b8f-b86c-08e64b2759d4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
